<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Whidy Daily</title>
    <link>/post/</link>
    <description>Recent content in Posts on Whidy Daily</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何给Egg.js项目开启80端口访问</title>
      <link>/post/%E5%A6%82%E4%BD%95%E7%BB%99egg.js%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%90%AF80%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E7%BB%99egg.js%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%90%AF80%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE/</guid>
      <description>如何给Egg.js项目开启80端口访问 为什么要 因某些特殊情况，项目cdn做了防盗链，然后本地开发也收到了限制，在cdn设置了一些本地ip的白名单，居然对端口支持不好，结果有时候可以访问cdn资源，有时候又不行，无奈，和运维、后端商量讲开发地址暂时改成80端口，以便正常开发~
 Egg.js的项目改端口很简单啦。但是也有一些要注意的，本文面向MacOS，当然Linux系统应该同样适用。
 如何做 这里有几个方案，供君参考：
修改package.json 跑哪个命令就在这个命令后面加--port=80，例如：
&amp;quot;start&amp;quot;: &amp;quot;egg-scripts start --daemon --title=egg-server-51la-web-egg --workers=2 --port=80&amp;quot;, ...  dev同理。
配置config.local.js 如果没有这个文件自己创建一个，当然这个对应的是开发模式下使用。
部分配置如下：
&#39;use strict&#39;; module.exports = app =&amp;gt; { const exports = {}; exports.cluster = { listen: { port: 80, hostname: &#39;127.0.0.1&#39;, }, }; return exports; };  Nginx大法 比较麻烦，不过看了下官方文档，应该也是可以很好的支持的。有兴趣请阅读该节：
 部署  Warning 如果你不看这部分，很遗憾，你肯定跑不起来。你可能会遇到下面这些异常情况：
ERROR 3810 nodejs.AppWorkerDiedError: [master] app_worker#1:3813 died (code: 0, signal: null, suicide: false, state: dead), current workers: []  原因是Node.</description>
    </item>
    
    <item>
      <title>Clevo W350ETQ(神舟K590S)安装黑苹果10.13总结</title>
      <link>/post/w350etqk590s%E9%BB%91%E8%8B%B9%E6%9E%9C10.13/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/w350etqk590s%E9%BB%91%E8%8B%B9%E6%9E%9C10.13/</guid>
      <description>Clevo W350ETQ(神舟K590S)安装黑苹果10.13总结  作为一名爱瞎折腾的前端来说, 学会使用MacOSX, 或许是有必要的, 于是想着去买一台MBP, 可是无奈电脑太多, 不想再添置, 于是把我的神级Clevo W350ETQ(也是神舟后来出的K590S)忍痛的挂在了闲鱼上, 自己一直保养很好, 后来怒加4G条子和SSD, 所以卖的比一般的二手贵, 无人识相, 遂继续自用.
 我的电脑配置及相关评测曾经也在博客(相关索引)中提到. 在当年来说是非常强悍的一款游戏本, 至今依然能算一台中端性能笔记本, 只是便携性太差, 一直以来都作为办公台式机使用, 我这台配置如下:
处理器名称: Mobile QuadCore Intel Core i7-3612QM, 3000 MHz (30 x 100) 主板名称: Clevo W35_37ET 主板芯片组: Intel Panther Point HM77, Intel Ivy Bridge 系统内存: 8084 MB (4 GB * 2 DDR3-1600) 显示适配器: Intel(R) HD Graphics 4000 NVIDIA GeForce GTX 660M 显示器: LG Philips LP156WF1-TLC1 [15.6&amp;quot; LCD] 音频适配器: Realtek ALC269 @ Intel Panther Point PCH - High Definition Audio Controller [C-1] IDE 控制器: Intel(R) 7 Series Chipset Family SATA AHCI Controller IDE 控制器: Realtek PCIE CardReader 硬盘驱动器: OCZ-VERTEX4 硬盘驱动器: ST9500423AS 光盘驱动器: TSSTcorp CDDVDW SN-208AB 键盘: PS/2 标准键盘 鼠标: ELAN Input Device 网络适配器: Realtek PCIe GBE Family Controller 网络适配器: Realtek RTL8723AE Wireless LAN 802.</description>
    </item>
    
    <item>
      <title>ElementUI的Table组件中的renderHeader方法研究</title>
      <link>/post/elementui%E7%9A%84table%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84renderheader%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/elementui%E7%9A%84table%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84renderheader%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/</guid>
      <description>ElementUI的Table组件中的renderHeader方法研究 项目使用ElementUI，挺好用的，页面中有些地方的帮助提示通过使用组件Tooltip和el-icon-question来展示，代码如下：
&amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;本月累计收益 &amp;lt;el-tooltip class=&amp;quot;item&amp;quot; content=&amp;quot;截止至昨日本月累计收益&amp;quot; placement=&amp;quot;top&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;el-icon-question&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/el-tooltip&amp;gt; &amp;lt;/div&amp;gt;  截图如下：
另外也可以看看jsfiddle的demo
全站很多地方都有都需要这样的帮助提示，其中有些需要在表格的表头上添加，似乎有点难度。效果如下：
因为ElementUI上面的文档对这块自定义表头没有什么参考的文档，是否能够实现心里没底，去仔细翻了文档，发现有个renderHeader的函数可以实现，一直以为Vue还算比较熟悉的我有点点懵，这是个啥？？？
renderHeader（函数渲染） 在我不太多的Vue项目开发实践中，很少用到，因此并不熟悉，先看看官方解释：
 Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力，这就是 render 函数，它比 template 更接近编译器。
 ElementUI中的renderHeader就是对列标题Label区域渲染使用的Function，通过他实现自定义表头label功能！
万变不离其宗，这个ElementUI的解释一看就像是这段官方示例：
// 官方示例部分 render: function (createElement) { return createElement(&#39;h1&#39;, this.blogTitle) }  而回头再看看ElementUI的示例：Function(h, { column, $index })。耐心琢磨，结合createElement看看便粗略写出来了一个勉强能用的：
renderHeader(h, { column, $index }) { return h( &#39;el-tooltip&#39;, { props: { content: (function() { let label = column.label switch (label) { case &#39;访问数&#39;: return &#39;网站页面上独立访问应用的人数（UV）&#39; break case &#39;提交数&#39;: return &#39;网站页面上访客在应用上完成提交的数量&#39; break case &#39;成交数&#39;: return &#39;网站页面上最终成功在应用上完成提交的数量&#39; break } })(), placement: &#39;top&#39; }, domProps: { innerHTML: column.</description>
    </item>
    
    <item>
      <title>Javascript事件循环入门到“忘记”（一）</title>
      <link>/post/javascript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%85%A5%E9%97%A8%E5%88%B0%E5%BF%98%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%85%A5%E9%97%A8%E5%88%B0%E5%BF%98%E8%AE%B0%E4%B8%80/</guid>
      <description>Javascript事件循环入门到“忘记”（一）  本文主要介绍Javascript事件循环在浏览器上的一些特性和应用介绍。
 Javascript小知识 JavaScript的并发模型基于&amp;rdquo;事件循环&amp;rdquo;(Event Loop)。这个模型与像C或者Java这种其它语言中的模型截然不同。它永不阻塞，处理I/O通常通过事件和回调来执行，所以当一个应用正等待IndexedDB查询返回或者一个XHR请求返回时，它仍然可以处理其它事情，如用户输入。【参：并发模型与事件循环】
需要了解的几点：  单线程编程语言(Single Threaded)
只有一个主线程(one thread)，并且只有一个调用栈(Call Stack)，因此同一时间只能执行同一件事情。【参：Philip Roberts: What the heck is the event loop anyway? | JSConf EU (4:15)】
 执行上下文(Execution Context)
Javascript代码执行时，会进入一个执行上下文。它可以理解为当前代码的运行环境（包括三种：全局环境、函数环境、Eval环境）。【参：Javascript核心技术开发解密 Page-11】
 纠正一点分享会可能存在的错误，它和作用域(Scope)不同！作用域是针对变量的一个可访问区域，而执行上下文是属于函数的指向的对象。（Scope pertains to the visibility of variables, and context refers to the object to which a function belongs.）【参：Why Should We Care About Scope and Context ?】
 栈（stack）
函数调用形成了一个栈帧。JavaScript中叫做调用栈(Call Stack)；先进后出，后进先出(LIFO)。
 堆（heap）
对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域。
 队列（queue）
一个JavaScript运行时包含了一个待处理的消息队列。每一个消息都有一个为了处理这个消息相关联的函数。</description>
    </item>
    
    <item>
      <title>Javascript事件循环入门到“忘记”（二）</title>
      <link>/post/javascript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%85%A5%E9%97%A8%E5%88%B0%E5%BF%98%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%85%A5%E9%97%A8%E5%88%B0%E5%BF%98%E8%AE%B0%E4%BA%8C/</guid>
      <description>Javascript事件循环入门到“忘记”（二）  本文主要介绍Javascript事件循环在Node.js上的一些特性和应用介绍。
 回顾上一期内容 上一期主要针对浏览器上的事件循环进行了简单介绍，也展示了几个开发中可能有帮助的调试及错误分析方法。文章在此：Javascript事件循环入门到“忘记”（一）
我们还是需要反复尝试记住栈、队列、任务、非阻塞等几个概念。请自行思考片刻，我们进入Node.js的事件循环介绍。
Node.js特点  2009年发布、作者是Ryan Dahl 历史悠久，再不学就淘汰了（对于Deno表示鸭梨很大。。。） 单线程、基于Chrome的V8的Javascript运行环境 具备高并发，高性能的特点 事件驱动（ libuv ）、异步（libuv、非阻塞I/O模型） 底层C++编写的超快解释器、API几乎全部支持异步回调 非常适合服务器编程。。。Blablabla。。。   当然也是有缺点的，要不然作者也不会搞deno了。缺点：不稳定性、容易挂掉、无法充分发会多核CPU性能等等。
 示例思考 我们来看两个小Demo，思考一下结果是什么？
Demo - 1 setTimeout(() =&amp;gt; { console.log(&#39;timer1&#39;) Promise.resolve().then(() =&amp;gt; { console.log(&#39;promise1&#39;) }) }, 0) setTimeout(() =&amp;gt; { console.log(&#39;timer2&#39;) Promise.resolve().then(function() { console.log(&#39;promise2&#39;) }) }, 0)  &amp;hellip;此处表示思考了很久而产生的分割线&amp;hellip;
那么结果大家都有了吧，看看实际情况：
 情况一、在浏览器执行的结果：
timer1 promise1 timer2 promise2  情况二、在Node.js环境执行的结果：
timer1 timer2 promise1 promise2   你是不是看到了区别，以为这就完了吗？作为原文中为提到的补充资料，请注意Node.js环境中也有可能存在情况一的结果（极少情况下，概率约15%发生）！
至于Node.js环境出现两种不同的结果，我暂时还没有比较完美的答复，期待有大佬指点（据说和机器性能有关，也就是Demo - 2展示的情况一样）</description>
    </item>
    
    <item>
      <title>VSCode下让CSS文件完美支持SCSS或SASS语法方法</title>
      <link>/post/vscode%E4%B8%8B%E8%AE%A9css%E6%96%87%E4%BB%B6%E5%AE%8C%E7%BE%8E%E6%94%AF%E6%8C%81scss%E6%88%96sass%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/vscode%E4%B8%8B%E8%AE%A9css%E6%96%87%E4%BB%B6%E5%AE%8C%E7%BE%8E%E6%94%AF%E6%8C%81scss%E6%88%96sass%E6%96%B9%E6%B3%95/</guid>
      <description>VSCode下让CSS文件完美支持SCSS或SASS语法方法  习惯Webpack + PostCSS后, 通常PostCSS都是直接对CSS文件进行处理, 但是大部分习惯SCSS/SASS/LESS的朋友也许不适应了. 我专门研究了一下, 在Visual Studio Code编辑器下如果配置相关代码和设置达到CSS文件完美编写SCSS的办法, 其他语法类型原理相似, 这里以SCSS为例.
 开始配置 Visual Studio Code编辑器设置的配置 首先, 配置编辑器的设置, 按快捷键&amp;rdquo;CTRL + ,&amp;ldquo;打开用户设置, 添加如下配置片段:
&amp;quot;files.associations&amp;quot;: { &amp;quot;*.css&amp;quot;: &amp;quot;scss&amp;quot; }  我这里做了全局的用户设置, 因为我个人大部分情况下是写SCSS, 当然如果你仅对该项目配置, 也可以将上面这段放进工作区设置(是放在默认花括号内哦, 千万不要弄错了~).
这样, VSCode编辑器就会把所有CSS文件当成SCSS格式来解析了, 也就不会出现可怕的红色波浪线了.
PostCSS的配置 接下来, 对PostCSS进行相关配置. 我们这里需要安装最重要的两个PostCSS插件postcss-scss和precss. 执行命令:
npm i -D postcss-scss precss  安装好后, 修改项目的postcss.config.js配置如下(我另外有用到autoprefixer和cssnano, 当然你可以根据个人情况选择, 重要部分是parser: &amp;lsquo;postcss-scss&amp;rsquo;和require(&amp;lsquo;precss&amp;rsquo;)):
module.exports = { parser: &#39;postcss-scss&#39;, plugins: [ require(&#39;precss&#39;), require(&#39;autoprefixer&#39;), require(&#39;cssnano&#39;) ] }  这样问题就解决了. 试着编译一下以下测试代码:</description>
    </item>
    
    <item>
      <title>VSCode格式化代码功能失效的bug解决方法</title>
      <link>/post/vscode%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E5%A4%B1%E6%95%88%E7%9A%84bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/vscode%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E5%A4%B1%E6%95%88%E7%9A%84bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>VSCode格式化代码功能失效的bug解决方法  前不久我装上了黑苹果，那么为了快速转移开发环境，我使用了VSCode(Visual Studio Code下面简称VSCode)的插件Settings Sync来同步个人设置和其他常用插件，如果不熟悉Settings Sync的可以参考之前我写的一篇文章《Visual Studio Code 设置同步到github的插件介绍及使用方法(Settings Sync)》来使用。
 现象 当然本文并不是介绍同步，而是要说同步后的编码过程中出现的异常。在Mac下安装好VSCode，用Settings Sync同步成功后，接着git clone正在开发的项目到本地，开发过程中，却发现一个非常奇怪的问题：所有的格式化代码的功能都失效了。Mac下使用快捷键“Alt+Shift+F”（我用的windows键盘），却提示，“当前没有安装“xxx”文件的文档格式化程序。”！我的Vue，SCSS代码都无法正常格式化！这个非常令人不爽，难道Mac下的VSCode会有格式化代码功能的缺失？和Windows版本的VSCode功能不一致？我觉得不太可能。于是重启回到Windows 10，重新拉了项目测试，毫无问题。无论是Windows还是Mac，都是最新版的Visual Studio Code。
分析 无奈之下去google了一下格式化代码的问题，发现很多人都遇到过，有的人说重装VSCode，但是我才新装的，所以排除了，但是重装这个词让我想起一个东西，就是这些格式化代码工具，例如Vetur，Prettier，他们正常运行的时候都是会在编辑器中产生一个服务或者提示，而失效状态下是看不到的。于是我尝试把Vetur插件停用，重新加载再启用，然而还是无效！
想来想去，插件也安装了，编辑器也是新装的，为何插件没起到作用，突然记起之前Windows下的输出面板中是有Vue Language Server的，而现在却没有，是不是要重新安装插件呢，或者说通过Settings Sync自动化同步插件安装的功能还存在一些其他的问题呢？
解决方案 带着疑问我尝试着将Vetur和Prettier卸载，然后再重新安装，启动VSCode，打开项目，切换到一个Vue页面，终于看到了Vetur的服务，比如下面这张图中表现了正常的格式化功能的效果（截图为我解决问题后的图片）
图中看到这里有个Vue Language Server，才是真正表示Vetur插件正常，右下角还有个Prettier，说明一切正常，再试了一下使用快捷键“Alt+Shift+F”，也终于可以正常格式化代码了！问题完美解决。
结论 有时候自动化工具安装的插件可能会存在一些问题，虽然不排除我这个问题发生的偶然性。
另一方面，重装软件有时候能解决问题，不过需要针对问题分析，从最小的改变逐渐排除故障。如果我把VSCode重装，再用Settings Sync同步一次，也许的确可以解决问题，但是也有可能依旧存在问题，而从插件重装下手才是比较省时省力的。
那么，如果开发中依赖插件的部分功能失效了，你也可以尝试重装插件，或许问题就能快速解决了～</description>
    </item>
    
    <item>
      <title>Visual Studio Code使用中CPU占用率异常暴增过高原因</title>
      <link>/post/visual-studio-code%E4%BD%BF%E7%94%A8%E4%B8%ADcpu%E5%8D%A0%E7%94%A8%E7%8E%87%E5%BC%82%E5%B8%B8%E6%9A%B4%E5%A2%9E%E8%BF%87%E9%AB%98%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/visual-studio-code%E4%BD%BF%E7%94%A8%E4%B8%ADcpu%E5%8D%A0%E7%94%A8%E7%8E%87%E5%BC%82%E5%B8%B8%E6%9A%B4%E5%A2%9E%E8%BF%87%E9%AB%98%E5%8E%9F%E5%9B%A0/</guid>
      <description>今天要说的是一个困扰我好几个月的问题，Visual Studio Code（下文简称VSCode）在使用中突然增高，风扇开始狂转，温度骤增，影响心情的故障原因。
其实，无论是Windows还是OSX，很多人可能或多或少都遇到过VSCode突然就不好使了，我就遇到过好多次疑难杂症，折腾很久才弄出来，比如下面三点：
 tab键突然就不好使了，卡顿很久或者压根无法缩进，并且sidebar的git那块功能彻底失效！ 写Markdown文档的时候，tab键的缩进只能向右，不能收回。。。这真是奇葩。 使用中莫名其妙的风扇就响了起来，看看进程和温度，CPU满载执行，完全不知道怎么回事，这也是本次要专门提到的问题。  系统使用环境及VSCode状态检测 我使用的是黑苹果，当然这个与CPU占用率增高并无关系，通过code --status查看一些基本信息如下：
P750TM:~ whidy$ code --status Version: Code 1.30.2 (61122f88f0bf01e2ac16bdb9e1bc4571755f5bd8, 2019-01-07T22:48:31.260Z) OS Version: Darwin x64 17.7.0 CPUs: Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz (6 x 3600) Memory (System): 16.00GB (5.22GB free) Load (avg): 2, 2, 2 VM: 0% Screen Reader: no Process Argv: --inspect-extensions=9993 GPU Status: 2d_canvas: enabled checker_imaging: disabled_off flash_3d: enabled flash_stage3d: enabled flash_stage3d_baseline: enabled gpu_compositing: enabled multiple_raster_threads: enabled_on native_gpu_memory_buffers: enabled rasterization: unavailable_software video_decode: enabled video_encode: enabled webgl: enabled webgl2: enabled CPU %	Mem MB	PID	Process 0	98	1775	code main 0	49	1776	gpu-process 0	229	1777	window (settings.</description>
    </item>
    
    <item>
      <title>Visual Studio Code几款FTP插件使用总结</title>
      <link>/post/visual-studio-code%E5%87%A0%E6%AC%BEftp%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/visual-studio-code%E5%87%A0%E6%AC%BEftp%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>Visual Studio Code几款FTP插件使用总结 平时要维护类似wordpress这样的网站，然后虚拟主机又不支持远程仓的版本管理。总而言之，只能通过下载到本地修改后再通过FTP上传的情况，每次修改后都要开启FTP进行代码提交，相当繁琐。因此就诞生了一些编辑器的FTP插件，其实以前用sublime text的时候还有款插件叫SFTP不错（如果配置好了连接不上可以参考SFTP连接超时），可惜VSCODE上面没有，截至目前（2018年1月17日）可以用的FTP插件如下图：
为了找出最合适的插件，我全部都一个个试过了(关于如何使用参考插件说明， 十分简单就不多说了)。然后有以下感想：
 ftp-sync是测试中的唯一一个感觉还可以的，但是菜单为啥不全，感觉是一个BUG吧。希望后期能够优化。  SFTP/FTP sync总是回莫名其妙的卡住(左下角提示transfer就不动了)，而且相同文件好像也会再次覆盖，不会跳过.文件比较多的时候出问题，不建议使用。 ftp-kr跟Simple FTP/SFTP一样没啥暖用，还不如就用ftp软件操作 Simple FTP/SFTP没啥暖用，还不如就用ftp软件操作  写到最后感觉很惨，没有一个真正好用的，而且连ftp传输状态信息也没有。有时候比较惨的误操作了需要中断传输，貌似只能强制关闭编辑器&amp;hellip;
然后我还是用sublime text 的SFTP来维护需要涉及到FTP文件同步的项目了。当然如果你不怎么用sublime text的话，个人建议使用ftp-sync，毕竟目前来看，它在VSCode上表现还是不错的，有潜力，也期待作者进一步优化~</description>
    </item>
    
    <item>
      <title>Vue下滚动到页面底部无限加载数据Demo</title>
      <link>/post/vue%E4%B8%8B%E6%BB%9A%E5%8A%A8%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8%E6%97%A0%E9%99%90%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AEdemo/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/vue%E4%B8%8B%E6%BB%9A%E5%8A%A8%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8%E6%97%A0%E9%99%90%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AEdemo/</guid>
      <description>Vue下滚动到页面底部无限加载数据Demo  看到一篇Implementing an Infinite Scroll with Vue.js, 觉得挺实用的就看了下, 顺便简单翻译了一下给需要的人参考.
从这个项目中可以加深对Vue的生命周期的理解, 何时开始axios请求, 如何结合Vue使用原生js来写scroll事件等等, 我这里主要是对原文的重点提取和补充
 本文技术要点  Vue生命周期 axios简单用法 moment.js格式化日期 图片懒加载 结合原生js来写scroll事件 请求节流  创建项目 首先创建一个简单的vue项目
# vue init webpack-simple infinite-scroll-vuejs  然后安装项目所需要用的一些插件
# npm install axios moment  初始化用户数据 项目搭建完后, 跑起来看看
# npm run dev  打开http://localhost:8080无误后, 我们开始修改代码, 先看看获取用户数据这块,
&amp;lt;script&amp;gt; import axios from &#39;axios&#39; import moment from &#39;moment&#39; export default { name: &#39;app&#39;, // 创建一个存放用户数据的数组 data() { return { persons: [] } }, methods: { // axios请求接口获取数据 getInitialUsers() { for (var i = 0; i &amp;lt; 5; i++) { axios.</description>
    </item>
    
    <item>
      <title>Vue学习开发总结</title>
      <link>/post/vue%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/vue%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
      <description>vscode下开发
必备插件 https://vuejs.github.io/vetur/
比看文档 https://cn.vuejs.org/v2/guide/
vue-cli https://github.com/vuejs/vue-cli
axios https://github.com/axios/axios
vue-router https://router.vuejs.org/zh-cn/
Vuex https://vuex.vuejs.org/zh-cn/
Vue.js 服务器端渲染指南 https://ssr.vuejs.org/zh/
插件
v-charts https://v-charts.js.org/#/
有必要学习了解的UI
https://github.com/museui/muse-ui
https://www.youzanyun.com/zanui</description>
    </item>
    
    <item>
      <title>Wordpress博客转换成Jekyll尝试</title>
      <link>/post/wordpress%E8%BF%81%E7%A7%BBjekyll%E5%85%A8%E8%BF%87%E7%A8%8B%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/wordpress%E8%BF%81%E7%A7%BBjekyll%E5%85%A8%E8%BF%87%E7%A8%8B%E5%B0%8F%E8%AE%B0/</guid>
      <description>Wordpress博客转换成Jekyll尝试  想来想去还是想试试把我的博客转成Jekyll, 一方面为了git管理, 另一方面实在是感觉请求过多速度太慢, 可改造性太差. 经过迁移后, 默认主题, 速度杠杠的, 显示时间不到500ms哦~
 安装Jekyll(CentOS7)  本文在CentOS7环境下才操作
 环境需要  Ruby RubyGems NodeJS Python 2.7(Whidy比较懒, 貌似CentOS7自带? 还是啥时候装了, 不会的自己搜一下= =.)  安装Ruby2.5.0和RubyGems  目前最新稳定版本是2.5.0, CentOS自带源的版本比较老, 我们需要第三方源rbenv来安装最新稳定版, 安装方法如下:
  安装rbenv和Ruby依赖的组件
# sudo yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl sqlite-devel  安装rbenv和rub-build(务必在非root用户的home下面操作)
# cd ~ # git clone git://github.com/sstephenson/rbenv.git .rbenv # echo &#39;export PATH=&amp;quot;$HOME/.</description>
    </item>
    
    <item>
      <title>使用ElementUI和Axios以formData格式提交带有文件的表单的错误示范及分析解决</title>
      <link>/post/%E4%BD%BF%E7%94%A8elementui%E5%92%8Caxios%E4%BB%A5formdata%E6%A0%BC%E5%BC%8F%E6%8F%90%E4%BA%A4%E5%B8%A6%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E7%9A%84%E9%94%99%E8%AF%AF%E7%A4%BA%E8%8C%83%E5%8F%8A%E5%88%86%E6%9E%90%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8elementui%E5%92%8Caxios%E4%BB%A5formdata%E6%A0%BC%E5%BC%8F%E6%8F%90%E4%BA%A4%E5%B8%A6%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E7%9A%84%E9%94%99%E8%AF%AF%E7%A4%BA%E8%8C%83%E5%8F%8A%E5%88%86%E6%9E%90%E8%A7%A3%E5%86%B3/</guid>
      <description>使用ElementUI和Axios以formData格式提交带有文件的表单的错误示范及分析解决  做Vue项目的时候, 提交数据基本上都是用Axios, 之前做过的表单方面的提交, 并没有过多关注客户端和服务器之间的通信过程. 所以一直对HTTP的head请求头, body内容之类的不明不白, 为了短期(是的估计过半年又忘了😂)解决这个疑惑, 再次复习了一遍. 顺便总结了Vue中使用Axios处理包含上传文件的表单提交
 场景说明 项目使用的Vue(Nuxt)框架, 数据请求用的Axios插件, 表单包含了一些基本的用户信息填写, 同时还有身份证上传, 和后端沟通过, 提交数据的时候, 接口全部使用POST请求, 那么有文件上传的一般来说只能用formData格式.
实践及代码示例 我项目中使用的是ElementUI, 对于上传组件不熟悉的朋友, 需要注意几个事情:
 action是必填, 那么留空也许是个不错的做法. 获取到上传的文件的办法很多. 官方提供了几种事件来获取, 例如: on-success, on-change(首次上传会触发两次), 我这里使用了on-success 那么拿到上传的回调, 这里特别需要注意的, 我以on-success三个参数来看
 response是服务器返回的响应 file一个文件 fileList存放多个文件的数组   可能看到有file或者fileList会直接将它的数据提交给后台, 一开始我也是没注意到这点, 始终无法正确提交数据. 那么经过一番研究和排查, 得知: 真正的File对象是fileList数组中某个元素的raw属性!, 那么下面先看一段错误的示范:
  页面部分结构代码如下:
&amp;lt;el-form ref=&amp;quot;form&amp;quot; :model=&amp;quot;form&amp;quot; label-width=&amp;quot;120px&amp;quot;&amp;gt; &amp;lt;el-form-item label=&amp;quot;活动名称&amp;quot;&amp;gt; &amp;lt;el-input v-model=&amp;quot;form.name&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-form-item label=&amp;quot;活动区域&amp;quot;&amp;gt; &amp;lt;el-select v-model=&amp;quot;form.region&amp;quot; placeholder=&amp;quot;请选择活动区域&amp;quot;&amp;gt; &amp;lt;el-option label=&amp;quot;区域一&amp;quot; value=&amp;quot;shanghai&amp;quot;&amp;gt;&amp;lt;/el-option&amp;gt; &amp;lt;el-option label=&amp;quot;区域二&amp;quot; value=&amp;quot;beijing&amp;quot;&amp;gt;&amp;lt;/el-option&amp;gt; &amp;lt;/el-select&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-form-item label=&amp;quot;身份证正面&amp;quot;&amp;gt; &amp;lt;el-upload action=&amp;quot;&amp;quot; :on-success	=&amp;quot;handleSuccess&amp;quot; :multiple=&amp;quot;false&amp;quot; :limit=&amp;quot;1&amp;quot; :on-exceed=&amp;quot;handleExceed&amp;quot; :file-list=&amp;quot;fileList&amp;quot;&amp;gt; &amp;lt;el-button size=&amp;quot;small&amp;quot; type=&amp;quot;primary&amp;quot;&amp;gt;点击上传&amp;lt;/el-button&amp;gt; &amp;lt;div slot=&amp;quot;tip&amp;quot; class=&amp;quot;el-upload__tip&amp;quot;&amp;gt;只能上传jpg/png文件，且不超过500kb&amp;lt;/div&amp;gt; &amp;lt;/el-upload&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-form-item&amp;gt; &amp;lt;el-button type=&amp;quot;primary&amp;quot; @click=&amp;quot;onSubmit&amp;quot;&amp;gt;提交&amp;lt;/el-button&amp;gt; &amp;lt;el-button&amp;gt;取消&amp;lt;/el-button&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;/el-form&amp;gt;  这里我将上传文件数量限制为1个, 接下来是JavaScript部分:</description>
    </item>
    
    <item>
      <title>内网IP调整引发的Chrome历史记录修改及ShadowRoot的学习</title>
      <link>/post/ip%E5%8F%98%E5%8A%A8%E5%BC%95%E5%8F%91%E7%9A%84chrome%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%BF%AE%E6%94%B9%E5%8F%8Ashadowroot%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ip%E5%8F%98%E5%8A%A8%E5%BC%95%E5%8F%91%E7%9A%84chrome%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%BF%AE%E6%94%B9%E5%8F%8Ashadowroot%E4%BA%86%E8%A7%A3/</guid>
      <description>内网IP调整引发的Chrome历史记录修改及ShadowRoot的学习 由于IP经常变动, 导致本地项目的那些存在地址栏的历史记录就都失效了, 突然脑洞大开, 有没有办法修改本地历史记录的方法? &amp;gt; 想法是: 假设我原IP是192.168.1.51, 新IP是192.168.1.63, 我历史记录有http://192.168.1.51:8080/test.html, 我通过某种办法强行修改Chrome历史记录将192.168.1.51替换成192.168.1.63, 这样, 下次在地址栏输入test, 他就能自动填充http://192.168.1.63:8080/test.html了.
现实是残酷的, Chrome软件的历史记录貌似是二进制文件, 也可能是出于安全考虑. 为了快速解决问题, 我就不打算去研究如何修改二进制文件了.
于是改了host, 映射了一个Ip到本地域名, 为了方便内网其他小白用户快速修改host, 我就搞了个bat文件给他们, 执行后就追加一条来修改host, 参考批处理文件中ECHO命令显示换行.
echo. &amp;gt;&amp;gt; %WINDIR%\system32\drivers\etc\hosts &amp;amp; echo 192.168.1.63 bs.ybj.com &amp;gt;&amp;gt; %WINDIR%\system32\drivers\etc\hosts  当然这样以后如果再换IP, 就要手动就改一下host文件了~ 如果偷懒改这个bat文件, 有追加一条新的同域名指向不同IP, 可能不会出问题, 也可能会导致每次访问页面卡20s左右出来. 当然这里我们不考虑文件修改权限的系统相关的问题~
其他思考一: ShadowRoot探索 关于修改本地历史记录的想法诞生后, 我顺便在历史记录chrome://history/中搜索了一下192.168.1.51, 发现有两百多条, 我打算将他们导出成文本替换(其实没什么意义), 然而我发现, 在Console面板里, 这个历史记录居然无法通过普通的JS方法将所有的地址遍历输出, 通过观察Elements面板的DOM结构, 发现原因在于这个#shadow-root (open)这个节点内的DOM元素不能被直接获取到. 从来没有研究过ShadowRoot的我懵逼了, MDN上查到, 它与主DOM树分开渲染, 那么此时我是否有办法获取到DOM子树的根节点内的元素呢. 当然可以, 参考How to access elements under `shadow-root` at &amp;lsquo;chrome://downloads&amp;rsquo; using jquery and selenium?</description>
    </item>
    
    <item>
      <title>找个朋友聊着聊着就结婚了</title>
      <link>/post/%E6%89%BE%E4%B8%AA%E6%9C%8B%E5%8F%8B%E8%81%8A%E7%9D%80%E8%81%8A%E7%9D%80%E5%B0%B1%E7%BB%93%E5%A9%9A%E4%BA%86/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%89%BE%E4%B8%AA%E6%9C%8B%E5%8F%8B%E8%81%8A%E7%9D%80%E8%81%8A%E7%9D%80%E5%B0%B1%E7%BB%93%E5%A9%9A%E4%BA%86/</guid>
      <description> 找个朋友聊着聊着就结婚了 其实这是一则征友启事
 我大概闷骚但不宅，热衷网上分享交流，期待在网上认识有趣的人；我内向不怎么善于表达，接触的女生也不多了，我希望认识一个活泼可爱开朗的你。
 关于我 我今年30岁了，现居广州，是一名程序员，在这工作第四年了，我没有什么恋爱史，不怎么擅长讨好女生，不过相信我，偶尔也能说出惊艳令你感动的话语。
我兴趣颇广，可惜没有什么特别擅长的，偏文艺风，听音乐，玩游戏，写文章，也会摄影，会运动，打球，爬山，跑步都是我喜欢的，热爱音乐，学过一点点吉他，有时写写钢笔字，练练书法。如果有兴趣了解我的生活，欢迎关注我的微博，或者是豆瓣，还有我的网易云音乐上喜爱的歌曲，希望能和你产生共鸣。
我湖北洪湖出生，孝感人，但是又不是一个地地道道的孝感人，独生子，父母离异，母亲一人，父亲再婚。
我和同事朋友基本上都聊的很来，但是不太擅长和女生交往。平时工作也有可爱，幽默一面，熟悉后甚至会有些唠叨。但是，越是喜欢你，却越发羞涩。因此错过了很多很多不错的女生，有时鼓起勇气去和她们聊天，却又担心说错话，担心留下不好的印象，就不了了之了。我不太主动，但是内心的狂热依然存在。我会尽我所能为你做我能做的事情。
我有轻微的洁癖。动手能力强，会修电脑，修一些比较简单的电器故障等等。我有一个DIY的心，很多事情会尝试自己研究解决，会自己去主动学习。不过我的厨艺不太好，大概就是能做着自己吃，然而我比较喜欢切菜，可能因为我经常切图吧！我也比较注重良好的作息，习惯早睡早起。
希望你  我希望你比我小，身高差最好20厘米内，最好会打扮有条理。 我希望你面对问题有自己的思考，不会盲目跟风。 我希望你面对这个世界有一颗感恩的心，多包容少抱怨。 我希望你能尽量不绕弯子，除非你有意但不要过分为难我，我不太擅长去过度揣摩女生的心。  我们  我希望我们能互相信任，互相帮助，共同解决困难，分享喜悦。 我希望我们能踏踏实实的过日子，知道自己需要什么，不盲目攀比。 我希望我们能调皮的时候调皮，严肃的时候不要回避。 我希望我们能正视缺点，随着成长而进步，努力创造未来。 我希望我们有共同的喜好，热衷分享。如果你是设计师，也许我们可以一块接单做项目；如果你会乐器，也许我们可以尝试一块作曲演奏；如果你喜欢小动物，也许我们可以养只狗狗~  其他 我身高一米八，体重64公斤，有点瘦。下面有附上我的照片，还有其他近照，可以关注我的Instagram，也可以微博私信，豆邮我之类的，或是微信QQ加我😁
平时空闲一个人会打游戏或者看书，如果愿意出去逛街游玩更好，不抽烟少喝酒，无不良嗜好，因工作原因与电脑接触较多，职业前端开发工程师，虽然不是什么大牛，不过还是挺热爱这个职业的。我也很喜欢广州，希望能在这里呆下去。
我平时会在我的博客Whidy Blog写点东西，有兴趣可以读读。
爱情观：没有绝对的般配，如何我们能走到一起，遇到问题的时候，更多的是保护这份感情不受伤害，而不是过分约束对方，用爱去感染对方，用信任，用陪伴共度一生。
 本页仍在修订中，希望我能尽早找到另一半。其他待补充。
 </description>
    </item>
    
    <item>
      <title>正则表达式中`[反斜杠b]`和`反斜杠b`和`反斜杠B`的区别及匹配分析思路</title>
      <link>/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%8F%8D%E6%96%9C%E6%9D%A0b%E5%92%8C%E5%8F%8D%E6%96%9C%E6%9D%A0b%E5%92%8C%E5%8F%8D%E6%96%9C%E6%9D%A0b%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%8C%B9%E9%85%8D%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%8F%8D%E6%96%9C%E6%9D%A0b%E5%92%8C%E5%8F%8D%E6%96%9C%E6%9D%A0b%E5%92%8C%E5%8F%8D%E6%96%9C%E6%9D%A0b%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%8C%B9%E9%85%8D%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</guid>
      <description>复习正则表达式  最近研究ES6, 正好ES6也有正则方面的内容, 看看有什么新特性, 顺便又把精通正则表达式拿出来粗看了前面几章节, 于是给自己出了几道题. 还做了一点总结.
 [\b]和\b和\B  一般作为初学者看到这么多这些鬼都会头大了. 下面我将详细讲解一下.
 [\b] - 退格符 另外其实我一直都搞不清楚[\b]匹配一个退格(U+0008)是什么鬼. 似乎没有人告诉我这个退格符长什么样. 我也不知道那些各种转载各种规则的人他们自己知不知道是啥&amp;hellip; (难道就我不知道- -)
找了半天, 总算在MSDN: 正则表达式语言 - 快速参考找到了示例. 难道就是匹配\b用的吗😂, 当然很明显的区别是, 它属于字符转义
\b - 一个词的边界  MSDN: 匹配必须出现在 \w（字母数字）和 \W（非字母数字）字符之间的边界上。
 这个就很好理解了, 会写先行断言的我当然是知道了, 他不占用任何位置, 边界一般都是单词或数字两边, 更为具体的通过MDN的正则表达式文档\b介绍内的注意有指引, 查到ecma文档的15.10.2.6 Assertion中IsWordChar处, 不过由于个人能力有限, 对其理解如下:
通过这段代码(正则表达式案例分析 （一） - (3) 单词边界):
&amp;quot;I&#39;d prefer p2p O_O&amp;quot;.replace(/\b/g,function(){ console.log(arguments) });  输出结果:
{ &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 0, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 1, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 2, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 3, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 4, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 10, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 11, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 14, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 15, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; } { &#39;0&#39;: &#39;&#39;, &#39;1&#39;: 18, &#39;2&#39;: &#39;I\&#39;d prefer p2p O_O&#39; }  我们看到被断掉(用|表示)的位置分别是:</description>
    </item>
    
    <item>
      <title>用Gatsby和Strapi创建一个静态博客(翻译和自己探索过程中的经验总结)</title>
      <link>/post/%E7%94%A8gatsby%E5%92%8Cstrapi%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E7%94%A8gatsby%E5%92%8Cstrapi%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>用Gatsby和Strapi创建一个静态博客(翻译和自己探索过程中的经验总结)  原文参阅: Building a static blog using Gatsby and Strapi或https://blog.strapi.io/building-a-static-website-using-gatsby-and-strapi/. 本篇主要是对其精华内容进行翻译, 以及实操过程中遇到的问题解决和探索. 一些具体的操作步骤和细节, 我将忽略, 结合原文一起阅读效果更佳!
注: 本文操作环境是Linux VPS, CentOS 6 64bit
 介绍 这是一个包含很多静态内容页面的站点, 从技术上来说就如同一系列HTML文件, 展示给访问者. 与动态网站不同的是, 他不需要后端开发或者数据库支撑. 发布静态站点之所以容易, 是因为文件只需要上传到服务器或者存储器. 没有额外的渲染页面的请求, 也没有数据库被黑的风险, 所以它既安全也快速.
为了快速建站, 其实很多开源的静态页面生成框架可用, 比如前阵子我搞的Jekyll, Hugo, 好似国人偏爱的Hexo等等, 他们的工作原理相似, 内容都是通过静态文件(比如Markdown)或者带有内容的API, 通过获取这些内容, 注入到开发者做好的模板, 最后生成一大堆HTML文件.
Progressive Web Apps (PWA)实际上是网页应用, 几乎基于Javascript, 并且可靠, 快速, 有吸引力的. 这几年比较火的Angular, Vue, React都是类似的前端框架.
 静态站点遇见了PWA就产生了Gatsby
 将这两点组合起来的最佳选择看起来就是Gatsby了, 但是同样需要一个内容接口, 这就是我将要展示的, 通过Strapi创建一个内容API提供给Gatsby, 然后打包发布出一个静态站点.
Gatsby是什么 这个并不是型男熟知的杰士派, 虽然我也用过这个发泥, 好像不是很好用. Gatsby是基于React的快速静态网站框架, 有了它, 你就可以感觉飘飘然的开发React网站了.</description>
    </item>
    
    <item>
      <title>（未完成）Nuxt下的ESLint最佳实践</title>
      <link>/post/%E6%9C%AA%E5%AE%8C%E6%88%90nuxt%E4%B8%8B%E7%9A%84eslint%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%9C%AA%E5%AE%8C%E6%88%90nuxt%E4%B8%8B%E7%9A%84eslint%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>https://nuxtjs.org/guide/development-tools/
https://medium.com/@agm1984/how-to-set-up-es-lint-for-airbnb-vue-js-and-vs-code-a5ef5ac671e8
https://cn.vuejs.org/v2/style-guide/index.html
.eslintrc.js module.exports = { root: true, env: { browser: true, node: true }, parserOptions: { parser: &amp;lsquo;babel-eslint&amp;rsquo; }, extends: [ &amp;ldquo;eslint:recommended&amp;rdquo;, &amp;lsquo;plugin:vue/recommended&amp;rsquo;, &amp;ldquo;plugin:prettier/recommended&amp;rdquo; ], // required to lint *.vue files plugins: [ &amp;lsquo;vue&amp;rsquo; ], // add your custom rules here rules: { &amp;ldquo;semi&amp;rdquo;: [2, &amp;ldquo;never&amp;rdquo;], &amp;lsquo;vue/html-indent&amp;rsquo;: &amp;ldquo;off&amp;rdquo;, &amp;ldquo;vue/max-attributes-per-line&amp;rdquo;: &amp;ldquo;off&amp;rdquo;, &amp;ldquo;prettier/prettier&amp;rdquo;: [&amp;ldquo;error&amp;rdquo;, { &amp;ldquo;semi&amp;rdquo;: false, &amp;ldquo;singleQuote&amp;rdquo;: true }] } }
.prettierrc { &amp;ldquo;semi&amp;rdquo;: false, &amp;ldquo;singleQuote&amp;rdquo;: true }
安装Vetur settings.</description>
    </item>
    
    <item>
      <title>（未完成）关于Javascript规范在项目中应用管理</title>
      <link>/post/%E6%9C%AA%E5%AE%8C%E6%88%90%E5%85%B3%E4%BA%8Ejavascript%E8%A7%84%E8%8C%83%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%9C%AA%E5%AE%8C%E6%88%90%E5%85%B3%E4%BA%8Ejavascript%E8%A7%84%E8%8C%83%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/</guid>
      <description>关于Javascript规范在项目中应用管理 大家在用各种脚手架的时候，一定对JavaScript规范选择并不陌生，不熟悉JavaScript规范的一般会选常见的Standard或者Airbnb，但是他们究竟有什么区别，如何选择和应用呢，这篇文章将给你一个满意的答案。
JavaScript Standard Style https://github.com/standard/standard/blob/master/docs/README-zhcn.md
https://github.com/standard/standard/blob/master/docs/README-zhcn.md#visual-studio-code
Airbnb JavaScript Style https://github.com/airbnb/javascript
https://medium.com/@agm1984/how-to-set-up-es-lint-for-airbnb-vue-js-and-vs-code-a5ef5ac671e8</description>
    </item>
    
    <item>
      <title>（未完成）关于表单</title>
      <link>/post/%E6%9C%AA%E5%AE%8C%E6%88%90%E5%85%B3%E4%BA%8E%E8%A1%A8%E5%8D%95/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%9C%AA%E5%AE%8C%E6%88%90%E5%85%B3%E4%BA%8E%E8%A1%A8%E5%8D%95/</guid>
      <description>&amp;lt;!-- before --&amp;gt; &amp;lt;form bindsubmit=&amp;quot;login&amp;quot;&amp;gt; &amp;lt;view class=&amp;quot;form-login&amp;quot;&amp;gt; &amp;lt;view class=&amp;quot;form-login-group&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;loginName&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;用户名/邮箱&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;{{name}}&amp;quot; bindinput=&amp;quot;inputStatus&amp;quot; bindblur=&amp;quot;inputBlur&amp;quot; bindfocus=&amp;quot;inputFocus&amp;quot;&amp;gt;&amp;lt;/input&amp;gt; &amp;lt;icon hidden=&amp;quot;{{showNameIcon == &#39;&#39;}}&amp;quot; type=&amp;quot;clear&amp;quot; size=&amp;quot;16&amp;quot; color=&amp;quot;#ccc&amp;quot; class=&amp;quot;btn-clear-input&amp;quot; bindtap=&amp;quot;clearInput&amp;quot; data-type=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;view class=&amp;quot;form-login-group&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;loginPass&amp;quot; type=&amp;quot;password&amp;quot; placeholder=&amp;quot;密码&amp;quot; name=&amp;quot;pass&amp;quot; value=&amp;quot;{{pass}}&amp;quot; bindinput=&amp;quot;inputStatus&amp;quot; bindblur=&amp;quot;inputBlur&amp;quot; bindfocus=&amp;quot;inputFocus&amp;quot;&amp;gt;&amp;lt;/input&amp;gt; &amp;lt;icon hidden=&amp;quot;{{showPassIcon == &#39;&#39;}}&amp;quot; type=&amp;quot;clear&amp;quot; size=&amp;quot;16&amp;quot; color=&amp;quot;#ccc&amp;quot; class=&amp;quot;btn-clear-input&amp;quot; bindtap=&amp;quot;clearInput&amp;quot; data-type=&amp;quot;pass&amp;quot; /&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;button class=&amp;quot;btn-login&amp;quot; formType=&amp;quot;submit&amp;quot; size=&amp;quot;default&amp;quot;&amp;gt;登录&amp;lt;/button&amp;gt; &amp;lt;view class=&amp;quot;info&amp;quot;&amp;gt;注册账号请暂时到电脑版进行操作&amp;lt;/view&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;!-- after --&amp;gt; &amp;lt;form bindsubmit=&amp;quot;login&amp;quot;&amp;gt; &amp;lt;view class=&amp;quot;form-login&amp;quot;&amp;gt; &amp;lt;view class=&amp;quot;form-login-group&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;loginName&amp;quot; class=&amp;quot;&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;用户名/邮箱&amp;quot; placeholder-class=&amp;quot;input-placeholder&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;{{name}}&amp;quot; bindinput=&amp;quot;inputStatus&amp;quot; bindblur=&amp;quot;inputBlur&amp;quot; bindfocus=&amp;quot;inputFocus&amp;quot;&amp;gt;&amp;lt;/input&amp;gt; &amp;lt;icon hidden=&amp;quot;{{currentFocus !</description>
    </item>
    
  </channel>
</rss>